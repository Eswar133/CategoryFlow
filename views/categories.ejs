<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Categories</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: Arial, sans-serif;
      color: #333;
      background: #f9f9f9;
      min-height: 100vh;
    }

    .container {
      width: 90%;
      max-width: 800px;
      margin: 20px auto;
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
      color: #444;
    }

    form {
      display: flex;
      flex-direction: column;
      gap: 10px;
      background: #fff;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    input, select, button {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 14px;
    }

    button {
      background: #0078ff;
      color: white;
      cursor: pointer;
      transition: background 0.3s;
    }

    button:hover {
      background: #005bb5;
    }

    ul {
      list-style: none;
      margin-top: 20px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }

    li {
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      text-align: center;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    li img {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      object-fit: cover;
      margin-bottom: 10px;
    }

    .buttons {
      display: flex;
      gap: 10px;
      justify-content: center;
    }

    .buttons a {
      padding: 8px 12px;
      border-radius: 5px;
      text-decoration: none;
      font-size: 14px;
      font-weight: bold;
      color: white;
      background: #0078ff;
      transition: background 0.3s;
    }

    .buttons a:hover {
      background: #005bb5;
    }

    @media (max-width: 600px) {
      form, ul {
        width: 100%;
      }

      li {
        padding: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Categories</h1>
    <form id="createCategoryForm">
      <input type="text" name="name" placeholder="Category Name" required>
      <input type="text" name="image" placeholder="Image URL" required>
      <input type="text" name="description" placeholder="Description" required>
      <label for="taxApplicability">Tax Applicable?</label>
      <select id="taxApplicability" name="taxApplicability" required>
        <option value="false">No</option>
        <option value="true">Yes</option>
      </select>
      <div id="taxFields" style="display: none;">
        <input type="number" name="tax" placeholder="Tax Amount">
        <select name="taxType">
          <option value="percentage">Percentage</option>
          <option value="fixed">Fixed</option>
        </select>
      </div>
      <button type="submit">Create Category</button>
    </form>
    <ul id="categoryList">
      <% categories.forEach(category => { %>
        <li>
          <img src="<%= category.image %>" alt="<%= category.name %>">
          <strong><%= category.name %></strong>
          <p><%= category.description %></p>
          <div class="buttons">
            <a href="/categories/<%= category._id %>/subcategories">View</a>
            <a href="/categories/<%= category._id %>/edit">Edit</a>
          </div>
        </li>
      <% }) %>
    </ul>
  </div>


</body>
</html>
<script>
  document.getElementById('createCategoryForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch('/categories', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        alert('Category created successfully!');
        window.location.reload();
      } else {
        throw new Error('Failed to create category');
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  });

  document.getElementById('taxApplicability').addEventListener('change', (e) => {
    const taxFields = document.getElementById('taxFields');
    taxFields.style.display = e.target.value === 'true' ? 'block' : 'none';
  });
</script>