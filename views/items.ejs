<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Items</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      color: #f0f0f0;
      background: #0f2027;
      padding: 1rem;
    }

    .navbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      background: rgba(15, 31, 50, 0.9);
      border-radius: 8px;
      margin-bottom: 1rem;
    }

    .navbar .title {
      font-size: 1.25rem;
      color: #00d4ff;
    }

    .navbar .nav-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .navbar .nav-button {
      padding: 0.5rem 1rem;
      background: #00d4ff;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-size: 0.9rem;
    }

    .navbar .nav-button:hover {
      background: #0078ff;
    }

    h1 {
      color: #00d4ff;
      text-align: center;
      margin: 1rem 0;
      font-size: 1.5rem;
    }

    form {
      max-width: 600px;
      margin: 0 auto 1rem;
      padding: 1rem;
      background: rgba(15, 31, 50, 0.8);
      border-radius: 8px;
    }

    input, button, select {
      width: 100%;
      padding: 0.75rem;
      margin-bottom: 0.75rem;
      border: 1px solid rgba(0, 212, 255, 0.3);
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.05);
      color: #f0f0f0;
    }

    button {
      background: #00d4ff;
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background: #0078ff;
    }

    ul {
      list-style: none;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      padding: 0;
    }

    li {
      background: rgba(15, 31, 50, 0.8);
      border-radius: 8px;
      padding: 1rem;
    }

    li img {
      width: 100%;
      height: 150px;
      object-fit: cover;
      border-radius: 8px;
      margin-bottom: 0.5rem;
    }

    .price-info {
      margin-top: 0.5rem;
    }

    .price-info p {
      margin: 0.25rem 0;
    }

    .view-button {
      display: inline-block;
      padding: 0.5rem 1rem;
      background: #f39c12;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      margin-top: 0.5rem;
    }

    .view-button:hover {
      background: #e67e22;
    }

    .pagination {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-top: 1rem;
    }

    .pagination button {
      width: auto;
      padding: 0.5rem 1rem;
    }

    .pagination button:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <div class="navbar">
    <div class="title">Item Management</div>
    <div class="nav-buttons">
      <% if (categoryId && subCategoryId) { %>
        <a href="/categories/<%= categoryId %>/subcategories" class="nav-button">Back to Subcategories</a>
      <% } %>
      <a href="/categories" class="nav-button">Back to Categories</a>
    </div>
  </div>

  <h1>Items</h1>

  <!-- Search Form -->
  <form id="searchItemForm">
    <input type="text" name="name" placeholder="Search Item by Name" required>
    <button type="submit">Search</button>
  </form>

  <!-- Create Item Form -->
  <form id="createItemForm">
    <input type="text" name="name" placeholder="Item Name" required>
    <input type="text" name="image" placeholder="Image URL" required>
    <input type="text" name="description" placeholder="Description" required>
    <input type="number" name="baseAmount" placeholder="Base Amount" required>
    <input type="number" name="discount" placeholder="Discount" required>
    <label for="taxApplicability">Tax Applicability:</label>
    <select name="taxApplicability" id="taxApplicability">
      <option value="true">Yes</option>
      <option value="false" selected>No</option>
    </select>
    <div id="taxFields" style="display: none;">
      <input type="number" name="tax" placeholder="Tax Amount">
      <select name="taxType">
        <option value="percentage">Percentage</option>
        <option value="fixed">Fixed</option>
      </select>
    </div>
    <button type="submit">Create Item</button>
  </form>

  <!-- Item List -->
  <ul id="itemList">
    <% if (items && items.length > 0) { %>
      <% items.forEach(item => { %>
        <li>
          <strong><%= item.name %></strong>
          <img src="<%= item.image %>" alt="<%= item.name %>">
          <p><%= item.description %></p>
          <div class="price-info">
            <p><strong>Base Amount:</strong> ₹<%= item.baseAmount.toFixed(2) %></p>
            <p><strong>Discount:</strong> ₹<%= item.discount.toFixed(2) %></p>
            <p><strong>Total Amount:</strong> ₹<%= item.totalAmount.toFixed(2) %></p>
            <a href="/items/<%= item._id %>/edit" class="view-button">Edit</a>
          </div>
        </li>
      <% }); %>
    <% } else { %>
      <li>No items found</li>
    <% } %>
  </ul>

  <!-- Pagination -->
  <div class="pagination">
    <button id="prevPage" disabled>Previous</button>
    <span id="pageInfo">Page 1</span>
    <button id="nextPage" disabled>Next</button>
  </div>

  <script>
    let currentPage = 1;

    // Fetch items with search and pagination
    async function fetchItems(name = '', page = 1) {
      try {
        const response = await fetch(`/items/search?name=${encodeURIComponent(name)}&page=${page}`);
        if (response.ok) {
          const { items, totalPages, currentPage } = await response.json();
          const itemList = document.getElementById('itemList');
          itemList.innerHTML = items.map(item => `
            <li>
              <strong>${item.name}</strong>
              <img src="${item.image}" alt="${item.name}">
              <p>${item.description}</p>
              <div class="price-info">
                <p><strong>Base Amount:</strong> ₹${item.baseAmount.toFixed(2)}</p>
                <p><strong>Discount:</strong> ₹${item.discount.toFixed(2)}</p>
                <p><strong>Total Amount:</strong> ₹${item.totalAmount.toFixed(2)}</p>
                <a href="/items/${item._id}/edit" class="view-button">Edit</a>
              </div>
            </li>
          `).join('');
          document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
          document.getElementById('prevPage').disabled = currentPage === 1;
          document.getElementById('nextPage').disabled = currentPage === totalPages;
        } else {
          const error = await response.json();
          alert(`Error: ${error.message}`);
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      }
    }

    // Handle form submission for creating items
    document.getElementById('createItemForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      data.baseAmount = parseFloat(data.baseAmount);
      data.discount = parseFloat(data.discount);
      if (data.taxApplicability === 'false') {
        data.tax = 0;
        data.taxType = null;
      }
      data.totalAmount = data.baseAmount - data.discount;
      if (data.baseAmount <= data.discount) {
        alert('Base amount must be greater than discount.');
        return;
      }
      try {
        const response = await fetch(`/categories/<%= categoryId %>/subcategories/<%= subCategoryId %>/items`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });
        if (response.ok) {
          alert('Item created successfully!');
          e.target.reset();
          await fetchItems();
        } else {
          const error = await response.json();
          alert(`Error: ${error.message}`);
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      }
    });

    // Search form handler
    document.getElementById('searchItemForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const name = new FormData(e.target).get('name');
      currentPage = 1;
      await fetchItems(name, currentPage);
    });

    // Pagination handlers
    document.getElementById('prevPage').addEventListener('click', async () => {
      currentPage = Math.max(1, currentPage - 1);
      const name = new FormData(document.getElementById('searchItemForm')).get('name');
      await fetchItems(name, currentPage);
    });

    document.getElementById('nextPage').addEventListener('click', async () => {
      currentPage += 1;
      const name = new FormData(document.getElementById('searchItemForm')).get('name');
      await fetchItems(name, currentPage);
    });

    // Initial fetch to load first page of items
    fetchItems();

    // Toggle tax fields
    document.getElementById('taxApplicability').addEventListener('change', (e) => {
      document.getElementById('taxFields').style.display = e.target.value === 'true' ? 'block' : 'none';
    });
  </script>
</body>
</html>